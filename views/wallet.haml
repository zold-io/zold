- # (The MIT License)
- # 
- # Copyright (c) 2018-2025 Zerocracy
- # 
- # Permission is hereby granted, free of charge, to any person obtaining a copy
- # of this software and associated documentation files (the 'Software'), to deal
- # in the Software without restriction, including without limitation the rights
- # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- # copies of the Software, and to permit persons to whom the Software is
- # furnished to do so, subject to the following conditions:
- # 
- # The above copyright notice and this permission notice shall be included in all
- # copies or substantial portions of the Software.
- # 
- # THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- # SOFTWARE.

%p
  = wallet.network
  %br
  = wallet.protocol.to_s
  %br
  %code= wallet.id.to_s
  %br
  = wallet.key.to_pub.gsub(/([^ ]{16})/, '\1&shy;')

%table
  %thead
    %tr
      %th Id
      %th Date
      %th Amount
      %th Wallet
      %th Details
  %tbody
    - wallet.txns.each do |t|
      %tr
        - color = t.amount.negative? ? 'red' : 'green'
        %td{style: "color:#{color};"}= t.id
        %td= t.date.utc.iso8601
        %td{style:"text-align:right;color:#{color};"}= t.amount.to_zld(2)
        %td
          %a{href: "/wallet/#{t.bnf}.html"}
            %code= t.bnf
        %td= CGI.escapeHTML(t.details).gsub(/([^ ]{16})/, '\1&shy;')

%p
  = '&mdash;'
  %br
  Balance:
  = wallet.balance.to_zld(8)
  ZLD
  = "(#{wallet.balance.to_i} zents)"
  %br
  Transactions:
  = wallet.txns.count
  %br
  Taxes:
  = Zold::Tax.new(wallet).paid
  paid, the debt is
  = Zold::Tax.new(wallet).debt
  %br
  File size:
  = "#{Zold::Size.new(wallet.size)}/#{wallet.size}"
  = Zold::Copies.new(File.join(settings.copies, wallet.id)).all.count
  copies
  %br
  Modified:
  = wallet.mtime.utc.iso8601
  = "(#{Zold::Age.new(wallet.mtime.utc.iso8601)} ago)"
  %br
  Digest:
  %code= wallet.digest
